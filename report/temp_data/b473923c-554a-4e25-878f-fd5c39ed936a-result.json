{"name": "test_login[-123456-8888--2-200-image-用户名不能为空]", "status": "failed", "statusDetails": {"message": "AssertionError: assert '用户名不能为空' in '密码错误!'\n +  where '密码错误!' = <built-in method get of dict object at 0x00000236B64DC9D8>('msg')\n +    where <built-in method get of dict object at 0x00000236B64DC9D8> = {'msg': '密码错误!', 'status': -2}.get\n +      where {'msg': '密码错误!', 'status': -2} = <bound method Response.json of <Response [200]>>()\n +        where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "self = <scripts.api.test_login.TestLoginApi object at 0x00000236B6529F98>, username = '', password = 123456, code = 8888, status = -2, status_code = 200\ncontent_type = 'image', msg = '用户名不能为空'\n\n    @pytest.mark.parametrize(\"username, password, code, status, status_code, content_type, msg\",\n                             get_data(\"api/login_case.json\"))\n    def test_login(self, username, password, code, status, status_code, content_type, msg):\n        try:\n            logger.info(\"准备输入登录的接口测试用例：username={}，password={}，code={}\".format(username, password, code))\n            # 先获取验证码来断言\n            response = self.login_api.get_verify_code(self.session)\n            assert status_code == response.status_code\n            assert content_type in response.headers.get(\"Content-Type\")\n    \n            # 登录断言\n            response = self.login_api.login(self.session, username, password, code)\n            assert status_code == response.status_code\n            assert status == response.json().get(\"status\")\n>           assert msg in response.json().get(\"msg\")\nE           AssertionError: assert '用户名不能为空' in '密码错误!'\nE            +  where '密码错误!' = <built-in method get of dict object at 0x00000236B64DC9D8>('msg')\nE            +    where <built-in method get of dict object at 0x00000236B64DC9D8> = {'msg': '密码错误!', 'status': -2}.get\nE            +      where {'msg': '密码错误!', 'status': -2} = <bound method Response.json of <Response [200]>>()\nE            +        where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\nscripts\\api\\test_login.py:35: AssertionError"}, "attachments": [{"name": "log", "source": "fc9a2127-a25e-42ba-8c0a-4be85548d0e8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "''"}, {"name": "password", "value": "123456"}, {"name": "code", "value": "8888"}, {"name": "status", "value": "-2"}, {"name": "status_code", "value": "200"}, {"name": "content_type", "value": "'image'"}, {"name": "msg", "value": "'用户名不能为空'"}], "start": 1671638140196, "stop": 1671638144442, "uuid": "16fdc308-fab1-4c05-8dd2-01b20dd7478a", "historyId": "90827a1b51a70c4ecad2823f92fdc1dd", "testCaseId": "4afe22344157004dcb224b5ea47d91f1", "fullName": "scripts.api.test_login.TestLoginApi#test_login", "labels": [{"name": "parentSuite", "value": "scripts.api"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLoginApi"}, {"name": "host", "value": "DESKTOP-BV7K5QK"}, {"name": "thread", "value": "10120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.api.test_login"}]}